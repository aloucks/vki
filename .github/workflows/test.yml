name: tests
on:
  schedule:
    - cron: "0 0 * * *"
  pull_request:
  push:
    paths-ignore:
      - "docs/**"

jobs:
  check:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
          profile: minimal
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build:
    name: Test
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      #VK_LOADER_DEBUG: all
      zVK_LAYER_PATH: vulkan
      zVK_ICD_FILENAMES: vulkan\vk_swiftshader_icd.json
      zSWIFTSHADER_DISABLE_DEBUGGER_WAIT_DIALOG: 1
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        toolchain: [stable, nightly]
    steps:
      - uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        id: rust
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
          profile: minimal
      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: update
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build target
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.toolchain }}-${{ steps.rust.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-${{ matrix.toolchain }}-${{ steps.rust.outputs.rustc_hash }}-
      - name: Install GLFW dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt update
          sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
      - name: Build lib
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --lib
      - name: Build tests and examples
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-run
      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --examples
      # - name: Download vulkan loader, swiftshader, and validation layer
      #   if: ${{ runner.os == 'Windows' && matrix.toolchain == 'stable' }}
      #   run: |
      #     mkdir vulkan
      #     curl -LRJ -o vulkan/vk-test_windows-amd64.zip https://github.com/aloucks/vk-test/releases/download/v0.0.0/vk-test_windows-amd64.zip
      #     7z e -y vulkan/vk-test_windows-amd64.zip -ovulkan
      #     dir vulkan
      #     echo "::add-path::vulkan"
      - uses: aloucks/vulkan-ci@v1
      - name: Run integration tests
      #  if: ${{ (runner.os == 'Windows' || runner.os == 'Linux') && matrix.toolchain == 'stable' }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --tests
        env:
          zVK_LOADER_DEBUG: all
